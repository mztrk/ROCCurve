#' Draw ROC curve including a logo
#' 
#' \code{DrawROCCurve} Saves a ROC curve with a logo in a png file
#' 
#' @param dir string that gives the path where the png file will be saved.
#' @param validationSet data.frame or data.table object with the target
#'   variable and the associated scores (scores are optional).
#' @param target a string with the name of the column target variable inside 
#'   the validationSet
#' @param scores if a string, gives the name of the scores inside 
#'   validationSet. If numeric, vector with the scores associated to the
#'   registers in validationSet (has to be in the same order).
#' @param colours strings that set the colours to be used in the plot for, in
#'   this order, ROC curve and line of random model.
#' @param title string to add to the title of the plot and the name of the png
#'   file.
#' @param maxSize integer that sets the maximum number of points to be
#'   considered when plotting. This is needed because ggplot2 takes a
#'   huge amount of time for big data sets.
#' @param logo string that contains the path to the png file with the logo.
#' @param ... Other parameters passed on to \code{ggsave}.
#' 
#' @return Silently saves a png file with the generated ROC curve.
#'
#' @author Mustafa Ozturk, \email{ozturkmu3@gmail.com}
#'
#' @examples
#' set.seed(2529)
#' nR <- 2e+05
#' D.ex <- rbinom(nR, size = 1, prob = 0.5)
#' M1 <- rnorm(nR, mean = D.ex, sd = 0.65)
#' M2 <- rnorm(nR, mean = D.ex, sd = 1.5)
#' test <- data.frame(D = D.ex, D.str = c("Healthy", "Ill")[D.ex + 1], M1 = M1,
#'                    M2 = M2, straingsAsFactors = FALSE)
#' DrawROCCurve(validationSet = test, target = "D", scores = "M1",
#'                title = "example", logo = system.file("img", "Rlogo.png",
#'                                                     package="png"),
#'                height = 7, width = 8)
#' @export


DrawROCCurve <- function(dir = NULL, target, scores, colours = c("#EC0D06", "#000000"), 
                         title = "test", maxSize = 750000, ...){
  

  perf <- performance(pred <- prediction(scores, target),
                        'tpr', 'fpr')
 
  gini <- (unlist(performance(pred, measure = 'auc')@y.values) - 0.5) * 2
  x <- unlist(perf@y.values)
  y <- unlist(perf@x.values)
  
  baserate <- mean(target)
  percentile1 <- quantile(scores, probs = 0.99)
  uplift <- mean(target[ scores > percentile1 ]) / mean(target) 
  Acc01 <- mean(target[ scores > quantile(scores, probs = 0.999) ])
  
  DT <- data.table(False_positive_rate = unlist(perf@x.values),
                   True_positive_rate = unlist(perf@y.values))
  
  if (DT[, .N] > 1e+06){
    set.seed(38476)
    filter_ <- sample(x = 1:DT[, .N], size = maxSize)
    DT <- DT[filter_]
  }
  
  suppressWarnings(
    p <- ggplot(DT, aes(x = False_positive_rate, y = True_positive_rate)) + 
      geom_abline(slope = 1, intercept = 0, color = colours[[2]],
                  linetype = "twodash") +
      geom_line(color = colours[[1]]) + 
      scale_x_continuous(limits = c(0, 1), expand = c(0, 0.00),
                         breaks = seq(0, 1, by = 0.1)) +
      scale_y_continuous(limits = c(0, 1), expand = c(0, 0.00),
                         breaks = seq(0, 1, by = 0.1)) + 
      theme_bw() +
      # theme(panel.border = element_rect(fill = NA),
      #       plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
      #       plot.caption = element_text(family = "Calibri", face = "italic",
      #                                   color = "darkgrey", size = 5)) +
      # geom_rect(xmin = 0.8, xmax = Inf, ymin = -Inf, ymax = 0.15,
      #           fill = "white", color = "black", size = 0.25) +
       labs(title = paste0(title, " - ROC Curve"), x = "False positive rate",
           y = "True positive rate",
           caption = "Mustafa Ozturk#' Draw ROC curve including a logo
#' 
#' \code{DrawROCCurve} Saves a ROC curve with a logo in a png file
#' 
#' @param dir string that gives the path where the png file will be saved.
#' @param validationSet data.frame or data.table object with the target
#'   variable and the associated scores (scores are optional).
#' @param target a string with the name of the column target variable inside 
#'   the validationSet
#' @param scores if a string, gives the name of the scores inside 
#'   validationSet. If numeric, vector with the scores associated to the
#'   registers in validationSet (has to be in the same order).
#' @param colours strings that set the colours to be used in the plot for, in
#'   this order, ROC curve and line of random model.
#' @param title string to add to the title of the plot and the name of the png
#'   file.
#' @param maxSize integer that sets the maximum number of points to be
#'   considered when plotting. This is needed because ggplot2 takes a
#'   huge amount of time for big data sets.
#' @param logo string that contains the path to the png file with the logo.
#' @param ... Other parameters passed on to \code{ggsave}.
#' 
#' @return Silently saves a png file with the generated ROC curve.
#'
#' @author Juan Rosco, \email{Juan_Rosco@@mckinsey.com}
#'
#' @examples
#' set.seed(2529)
#' nR <- 2e+05
#' D.ex <- rbinom(nR, size = 1, prob = 0.5)
#' M1 <- rnorm(nR, mean = D.ex, sd = 0.65)
#' M2 <- rnorm(nR, mean = D.ex, sd = 1.5)
#' test <- data.frame(D = D.ex, D.str = c("Healthy", "Ill")[D.ex + 1], M1 = M1,
#'                    M2 = M2, straingsAsFactors = FALSE)
#' DrawROCCurve(validationSet = test, target = "D", scores = "M1",
#'                title = "example", logo = system.file("img", "Rlogo.png",
#'                                                     package="png"),
#'                height = 7, width = 8)
#' @export


DrawROCCurve <- function(dir = NULL, target, scores, colours = c("#EC0D06", "#000000"), 
                         title = "test", maxSize = 750000, ...){
  

  perf <- performance(pred <- prediction(scores, target),
                        'tpr', 'fpr')
 
  gini <- (unlist(performance(pred, measure = 'auc')@y.values) - 0.5) * 2
  x <- unlist(perf@y.values)
  y <- unlist(perf@x.values)
  
  baserate <- mean(target)
  percentile1 <- quantile(scores, probs = 0.99)
  uplift <- mean(target[ scores > percentile1 ]) / mean(target) 
  Acc01 <- mean(target[ scores > quantile(scores, probs = 0.999) ])
  
  DT <- data.table(False_positive_rate = unlist(perf@x.values),
                   True_positive_rate = unlist(perf@y.values))
  
  if (DT[, .N] > 1e+06){
    set.seed(38476)
    filter_ <- sample(x = 1:DT[, .N], size = maxSize)
    DT <- DT[filter_]
  }
  
  suppressWarnings(
    p <- ggplot(DT, aes(x = False_positive_rate, y = True_positive_rate)) + 
      geom_abline(slope = 1, intercept = 0, color = colours[[2]],
                  linetype = "twodash") +
      geom_line(color = colours[[1]]) + 
      scale_x_continuous(limits = c(0, 1), expand = c(0, 0.00),
                         breaks = seq(0, 1, by = 0.1)) +
      scale_y_continuous(limits = c(0, 1), expand = c(0, 0.00),
                         breaks = seq(0, 1, by = 0.1)) + 
      theme_bw() +
      # theme(panel.border = element_rect(fill = NA),
      #       plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
      #       plot.caption = element_text(family = "Calibri", face = "italic",
      #                                   color = "darkgrey", size = 5)) +
      # geom_rect(xmin = 0.8, xmax = Inf, ymin = -Inf, ymax = 0.15,
      #           fill = "white", color = "black", size = 0.25) +
       labs(title = paste0(title, " - ROC Curve"), x = "False positive rate",
           y = "True positive rate",
           caption = "Roc Curve by Mustafa Ozturk") +
      annotate("text", label = paste0("Rat%: ", round(baserate*100, 4),"%"), x = 0.75,
               y = 0.2, size = 5, fontface = "bold", family = "Ubuntu")+
      annotate("text", label = paste0("Acc0.1%: ", round(Acc01*100, 2),"%"), x = 0.75,
               y = 0.15, size = 5, fontface = "bold", family = "Ubuntu")+
      annotate("text", label = paste0("Gini: ", round(gini*100, 1),"%"), x = 0.75,
               y = 0.1, size = 5, fontface = "bold", family = "Ubuntu") +
      annotate("text", label = paste0("Lift1%: ", round(uplift, 1)), x = 0.75, 
               y = 0.05, size = 5, fontface = "bold", family = "Ubuntu")
      
    )
  ggsave(plot = p, filename = file.path(dir, paste0(title, "_ROC", ".png")))  
  
}
") +
      annotate("text", label = paste0("Rat%: ", round(baserate*100, 4),"%"), x = 0.75,
               y = 0.2, size = 5, fontface = "bold", family = "Ubuntu")+
      annotate("text", label = paste0("Acc0.1%: ", round(Acc01*100, 2),"%"), x = 0.75,
               y = 0.15, size = 5, fontface = "bold", family = "Ubuntu")+
      annotate("text", label = paste0("Gini: ", round(gini*100, 1),"%"), x = 0.75,
               y = 0.1, size = 5, fontface = "bold", family = "Ubuntu") +
      annotate("text", label = paste0("Lift1%: ", round(uplift, 1)), x = 0.75, 
               y = 0.05, size = 5, fontface = "bold", family = "Ubuntu")
      
    )
  ggsave(plot = p, filename = file.path(dir, paste0(title, "_ROC", ".png")))  
  
}
